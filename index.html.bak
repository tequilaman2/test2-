<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-touch-fullscreen" content="yes">
    <title>AR Viewer</title>
    
    <!-- AR.js –∏ A-Frame –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ -->
    <script src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <script src="https://unpkg.com/aframe-look-at-component@0.8.0/dist/aframe-look-at-component.min.js"></script>
    <!-- –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤ -->
    <script src="jsQR.js"></script>
    
    <!-- –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–æ–Ω AR.js -->
    <script>
      // –û—Ç–∫–ª—é—á–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ –æ–∫–Ω–∞ AR.js
      window.addEventListener('load', function() {
        // –û—Ç–∫–ª—é—á–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AR
        if (window.ARjs && window.ARjs.Utils) {
          window.ARjs.Utils.displayResolutionPrompt = function() {};
        }
        
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π confirm
        const originalConfirm = window.confirm;
        window.confirm = function(message) {
          console.log('Confirm dialog bypassed:', message);
          return true; // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true, –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "OK"
        };
        
        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π prompt
        const originalPrompt = window.prompt;
        window.prompt = function(message, defaultValue) {
          console.log('Prompt dialog bypassed:', message);
          return defaultValue; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        };
      });
    </script>
    
    <style>
      body {
        margin: 0;
        padding: 0;
        background-color: #000;
        color: white;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        height: 100vh;
        overflow: hidden;
      }

      .carousel-container {
        position: fixed;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        align-items: center;
        justify-content: center;
        width: 95%;
        max-width: 600px;
        z-index: 1000;
      }

      .carousel {
        display: flex;
        justify-content: center;
        align-items: center;
        background: rgba(0, 0, 0, 0.7);
        border-radius: 15px;
        padding: 10px;
        width: 100%;
        max-width: 500px;
        overflow: hidden;
      }

      .carousel-item {
        flex: 0 0 auto;
        width: 100px;
        height: 100px;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        background: rgba(255, 255, 255, 0.1);
        border: 2px solid transparent;
        overflow: hidden;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 0 15px;
        position: relative;
      }

      .model-display {
        width: 100%;
        height: 100%;
        overflow: hidden;
        position: relative;
      }

      .carousel-item:hover {
        transform: scale(1.05);
      }

      .carousel-item.active {
        border-color: #007AFF;
      }

      .loading {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.9);
        display: flex;
        justify-content: center;
        align-items: center;
        color: white;
        font-size: 18px;
        z-index: 2000;
      }

      .loading.hidden {
        display: none;
      }

      .ar-hint {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 15px 25px;
        border-radius: 10px;
        text-align: center;
        z-index: 1000;
        font-size: 16px;
        transition: opacity 0.3s ease;
      }

      .ar-hint.hidden {
        opacity: 0;
        pointer-events: none;
      }

      /* –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å AR.js */
      .a-enter-vr {
        display: none !important;
      }
      
      /* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å QR-–∫–æ–¥–∞–º–∏ */
      #qr-canvas {
        display: none;
      }
      
      #qr-video {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        opacity: 0;
        pointer-events: none;
        z-index: -1;
      }
      
      .qr-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%; 
        height: 100%;
        z-index: 900;
        pointer-events: none;
      }
      
      .qr-finder {
        position: absolute;
        border: 2px solid #00ff00;
        box-shadow: 0 0 0 2px rgba(0, 255, 0, 0.5);
        pointer-events: none;
        display: none;
      }
      
      .model-controls {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        display: flex;
        flex-direction: column;
      }
      
      .model-control-btn {
        background: rgba(0, 0, 0, 0.7);
        color: white;
        border: none;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        margin-bottom: 10px;
        font-size: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        text-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
      }
      
      .model-control-btn:active {
        transform: translateY(2px);
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
      }
      
      .draggable-model {
        cursor: move;
      }
    </style>
  </head>
  <body>
    <div class="loading" id="loading">–ó–∞–≥—Ä—É–∑–∫–∞ AR...</div>
    <div class="ar-hint" id="ar-hint">–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞</div>
    
    <!-- –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å QR-–∫–æ–¥–∞–º–∏ -->
    <canvas id="qr-canvas"></canvas>
    <video id="qr-video" playsinline></video>
    <div class="qr-overlay">
      <div id="qr-finder" class="qr-finder"></div>
    </div>
    
    <!-- –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π -->
    <div class="model-controls" id="model-controls" style="display: none;">
      <button class="model-control-btn" id="rotate-model-btn">üîÑ</button>
      <button class="model-control-btn" id="scale-up-btn">‚ûï</button>
      <button class="model-control-btn" id="scale-down-btn">‚ûñ</button>
      <button class="model-control-btn" id="remove-model-btn">üóëÔ∏è</button>
    </div>

    <!-- A-Frame —Å—Ü–µ–Ω–∞ -->
    <a-scene
      embedded
      arjs="sourceType: webcam; debugUIEnabled: false; detectionMode: mono_and_matrix; matrixCodeType: 3x3; patternRatio: 0.5; trackingMethod: best; maxDetectionRate: 60; cameraParametersUrl: camera_para.dat;"
      renderer="logarithmicDepthBuffer: true; precision: medium; antialias: true;"
      vr-mode-ui="enabled: false"
      id="scene"
    >
      <!-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è -->
      <a-assets>
        <a-mixin id="spin" animation="property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear"></a-mixin>
        <img id="site-img" src="site.png" />
        <img id="email-img" src="em.png" />
      </a-assets>
      
      <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è QR-–∫–æ–¥–æ–≤ -->
      <a-marker type="barcode" value="1" id="qr-marker-1"></a-marker>
      <a-marker type="barcode" value="2" id="qr-marker-2"></a-marker>
      <a-marker type="barcode" value="3" id="qr-marker-3"></a-marker>
      <a-marker type="barcode" value="4" id="qr-marker-4"></a-marker>
      
      <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ QR-–∫–æ–¥–∞–º -->
      <a-entity id="qr-model-container"></a-entity>
      
      <!-- –ö–∞–º–µ—Ä–∞ —Å –∫—É—Ä—Å–æ—Ä–æ–º –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è -->
      <a-entity camera>
        <a-cursor raycaster="objects: .clickable, .draggable-model"></a-cursor>
      </a-entity>
    </a-scene>

    <!-- –ö–∞—Ä—É—Å–µ–ª—å –º–æ–¥–µ–ª–µ–π -->
    <div class="carousel-container">
    <div class="carousel">
        <div class="carousel-item active" data-model="models/cat.glb" data-usdz="models/cat.usdz">
          <div class="model-display">
            <a-entity 
              id="preview-cat"
              gltf-model="models/cat.glb" 
              position="0 -0.2 -1.5" 
              rotation="0 -45 0" 
              scale="0.8 0.8 0.8"
            ></a-entity>
          </div>
        </div>
        <div class="carousel-item" data-model="models/model.glb" data-usdz="models/model.usdz">
          <div class="model-display">
            <a-entity 
              id="preview-chair"
              gltf-model="models/model.glb" 
              position="0 -0.2 -1.5" 
              rotation="0 -45 0" 
              scale="0.8 0.8 0.8"
            ></a-entity>
      </div>
      </div>
      </div>
    </div>

    <script>
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–æ–≤
      AFRAME.registerComponent('clickable', {
        init: function() {
          const el = this.el;
          
          el.addEventListener('click', function() {
            const id = el.id;
            
            if (id === 'website-button') {
              window.open('https://www.alphawood.store', '_blank');
              console.log('Website button clicked');
            } else if (id === 'email-button') {
              window.location.href = 'mailto:info@alphawood.store';
              console.log('Email button clicked');
            }
          });
        }
      });
      
      // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π
      AFRAME.registerComponent('draggable', {
        init: function() {
          this.el.classList.add('draggable-model');
          
          // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
          this.isDragging = false;
          this.dragStartPosition = new THREE.Vector3();
          this.dragStartMousePosition = new THREE.Vector2();
          this.planeNormal = new THREE.Vector3(0, 0, 1);
          this.plane = new THREE.Plane();
          this.raycaster = new THREE.Raycaster();
          this.mouse = new THREE.Vector2();
          this.dragOffset = new THREE.Vector3();
          
          // –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–µ—Ä—É
          this.camera = document.querySelector('a-entity[camera]').object3D;
          
          // –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
          this.el.addEventListener('mousedown', this.onDragStart.bind(this));
          // –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
          document.addEventListener('mousemove', this.onDragMove.bind(this));
          // –ö–æ–Ω–µ—Ü –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
          document.addEventListener('mouseup', this.onDragEnd.bind(this));
          
          // –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–∞—á—Å–∫—Ä–∏–Ω–∞
          this.el.addEventListener('touchstart', this.onDragStart.bind(this));
          document.addEventListener('touchmove', this.onDragMove.bind(this));
          document.addEventListener('touchend', this.onDragEnd.bind(this));
        },
        
        onDragStart: function(event) {
          event.preventDefault();
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –º–æ–¥–µ–ª–∏
          this.el.object3D.getWorldPosition(this.dragStartPosition);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
          const mouseEvent = event.type === 'touchstart' ? event.touches[0] : event;
          this.dragStartMousePosition.x = (mouseEvent.clientX / window.innerWidth) * 2 - 1;
          this.dragStartMousePosition.y = -(mouseEvent.clientY / window.innerHeight) * 2 + 1;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
          this.planeNormal.copy(this.camera.getWorldDirection(this.planeNormal).negate());
          this.plane.setFromNormalAndCoplanarPoint(this.planeNormal, this.dragStartPosition);
          
          // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
          this.isDragging = true;
          
          // –ú–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫—É—Ä—Å–æ—Ä–∞
          document.body.style.cursor = 'grabbing';
        },
        
        onDragMove: function(event) {
          if (!this.isDragging) return;
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏
          const mouseEvent = event.type === 'touchmove' ? event.touches[0] : event;
          this.mouse.x = (mouseEvent.clientX / window.innerWidth) * 2 - 1;
          this.mouse.y = -(mouseEvent.clientY / window.innerHeight) * 2 + 1;
          
          // –°–æ–∑–¥–∞–µ–º —Ä–µ–π–∫–∞—Å—Ç –æ—Ç –∫–∞–º–µ—Ä—ã —á–µ—Ä–µ–∑ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –º—ã—à–∏
          this.raycaster.setFromCamera(this.mouse, this.camera);
          
          // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ø–ª–æ—Å–∫–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
          const intersect = new THREE.Vector3();
          if (this.raycaster.ray.intersectPlane(this.plane, intersect)) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–æ–¥–µ–ª–∏
            this.el.object3D.position.copy(intersect);
          }
        },
        
        onDragEnd: function(event) {
          if (this.isDragging) {
            this.isDragging = false;
            document.body.style.cursor = 'auto';
          }
        }
      });
      
      // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
      AFRAME.registerComponent('rotatable', {
        init: function() {
          this.isRotating = false;
          this.lastMousePosition = new THREE.Vector2();
          
          this.el.addEventListener('mousedown', this.onRotateStart.bind(this));
          document.addEventListener('mousemove', this.onRotateMove.bind(this));
          document.addEventListener('mouseup', this.onRotateEnd.bind(this));
          
          this.el.addEventListener('touchstart', this.onRotateStart.bind(this));
          document.addEventListener('touchmove', this.onRotateMove.bind(this));
          document.addEventListener('touchend', this.onRotateEnd.bind(this));
        },
        
        onRotateStart: function(event) {
          event.preventDefault();
          
          // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ Shift (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞) –∏–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
          if (window.rotationMode || (event.shiftKey && event.type === 'mousedown')) {
            this.isRotating = true;
            
            const mouseEvent = event.type === 'touchstart' ? event.touches[0] : event;
            this.lastMousePosition.x = mouseEvent.clientX;
            this.lastMousePosition.y = mouseEvent.clientY;
            
            document.body.style.cursor = 'move';
          }
        },
        
        onRotateMove: function(event) {
          if (!this.isRotating) return;
          
          const mouseEvent = event.type === 'touchmove' ? event.touches[0] : event;
          const deltaX = mouseEvent.clientX - this.lastMousePosition.x;
          
          // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
          const currentRotation = this.el.object3D.rotation;
          this.el.object3D.rotation.y += deltaX * 0.01;
          
          this.lastMousePosition.x = mouseEvent.clientX;
          this.lastMousePosition.y = mouseEvent.clientY;
        },
        
        onRotateEnd: function(event) {
          if (this.isRotating) {
            this.isRotating = false;
            document.body.style.cursor = 'auto';
          }
        }
      });
      
      document.addEventListener('DOMContentLoaded', async function() {
        const loading = document.querySelector('#loading');
        const arHint = document.querySelector('#ar-hint');
        const carouselItems = document.querySelectorAll('.carousel-item');
        const qrModelContainer = document.querySelector('#qr-model-container');
        const video = document.querySelector('#qr-video');
        const canvas = document.querySelector('#qr-canvas');
        const qrFinder = document.querySelector('#qr-finder');
        const scene = document.querySelector('#scene');
        const modelControls = document.querySelector('#model-controls');
        const rotateModelBtn = document.querySelector('#rotate-model-btn');
        const scaleUpBtn = document.querySelector('#scale-up-btn');
        const scaleDownBtn = document.querySelector('#scale-down-btn');
        const removeModelBtn = document.querySelector('#remove-model-btn');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
        const qrMarkers = [
          document.querySelector('#qr-marker-1'),
          document.querySelector('#qr-marker-2'),
          document.querySelector('#qr-marker-3'),
          document.querySelector('#qr-marker-4')
        ];
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        let currentModel = null;           // –¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        let loadingTimeout = null;         // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        let qrScanning = false;            // –í–∫–ª—é—á–µ–Ω–æ –ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR
        let qrDetectionTimer = null;       // –¢–∞–π–º–µ—Ä –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR
        let placedModels = [];             // –†–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –ø–æ QR
        let selectedModel = null;          // –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª—å
        let lastDetectedCode = null;       // –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π QR-–∫–æ–¥
        let lastMarkerFound = null;        // –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä
        window.rotationMode = false;       // –†–µ–∂–∏–º –≤—Ä–∞—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        
        const LOADING_TIMEOUT = 10000;     // 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤
        async function initQRScanner() {
          try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
            const stream = await navigator.mediaDevices.getUserMedia({
              video: { facingMode: 'environment' },
              audio: false
            });
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç
            video.srcObject = stream;
            video.setAttribute('playsinline', true);
            await video.play();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤
            qrScanning = true;
            startQRDetection();
            
            console.log('QR —Å–∫–∞–Ω–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞ QR-–∫–æ–¥–æ–≤:', error);
            arHint.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ';
          }
        }
        
        // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–¥—Ä–∞ –¥–ª—è QR-–∫–æ–¥–æ–≤
        function scanQRCode() {
          if (!qrScanning) return;
          
          // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç canvas
          const context = canvas.getContext('2d');
          const width = video.videoWidth;
          const height = video.videoHeight;
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –≤–∏–¥–µ–æ
          if (canvas.width !== width || canvas.height !== height) {
            canvas.width = width;
            canvas.height = height;
          }
          
          // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –Ω–∞ canvas
          context.drawImage(video, 0, 0, width, height);
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const imageData = context.getImageData(0, 0, width, height);
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ QR-–∫–æ–¥–∞
          const code = jsQR(imageData.data, imageData.width, imageData.height, {
            inversionAttempts: 'dontInvert',
          });
          
          // –ï—Å–ª–∏ QR-–∫–æ–¥ –Ω–∞–π–¥–µ–Ω
          if (code) {
            console.log('QR –∫–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω:', code.data);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ QR-–∫–æ–¥–∞
            displayQRFinder(code.location);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–æ—Ç –∂–µ –ª–∏ —ç—Ç–æ QR-–∫–æ–¥
            if (!lastDetectedCode || lastDetectedCode.data !== code.data) {
              lastDetectedCode = code;
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
              arHint.textContent = 'QR –∫–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ' + code.data;
              arHint.classList.remove('hidden');
              
              // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
              if (selectedModel) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                modelControls.style.display = 'flex';
                
                // –í—ã–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–ª–µ–π—Å–º–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω—è–ª —á—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å
                rotateModelBtn.style.backgroundColor = 'rgba(0, 255, 0, 0.7)';
                setTimeout(() => {
                  rotateModelBtn.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
                }, 2000);
              }
            }
          } else {
            // –°–∫—Ä—ã–≤–∞–µ–º —Ä–∞–º–∫—É, –µ—Å–ª–∏ QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            qrFinder.style.display = 'none';
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π QR-–∫–æ–¥
            if (lastDetectedCode) {
              lastDetectedCode = null;
              // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ QR-–∫–æ–¥–∞ –∏ –Ω–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
              if (placedModels.length === 0) {
                modelControls.style.display = 'none';
              }
            }
          }
          
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
          qrDetectionTimer = setTimeout(scanQRCode, 100);
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–∞–º–∫—É –≤–æ–∫—Ä—É–≥ QR-–∫–æ–¥–∞
        function displayQRFinder(location) {
          if (!location) {
            qrFinder.style.display = 'none';
            return;
          }
          
          // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–∑–º–µ—Ä—ã QR-–∫–æ–¥–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
          const scale = window.innerWidth / video.videoWidth;
          const left = Math.min(location.topLeftCorner.x, location.bottomLeftCorner.x) * scale;
          const top = Math.min(location.topLeftCorner.y, location.topRightCorner.y) * scale;
          const width = Math.max(
            Math.abs(location.topRightCorner.x - location.topLeftCorner.x),
            Math.abs(location.bottomRightCorner.x - location.bottomLeftCorner.x)
          ) * scale;
          const height = Math.max(
            Math.abs(location.bottomLeftCorner.y - location.topLeftCorner.y),
            Math.abs(location.bottomRightCorner.y - location.topRightCorner.y)
          ) * scale;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–º–∫–∏
          qrFinder.style.display = 'block';
          qrFinder.style.left = left + 'px';
          qrFinder.style.top = top + 'px';
          qrFinder.style.width = width + 'px';
          qrFinder.style.height = height + 'px';
        }
        
        // –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–æ–≤
        function startQRDetection() {
          if (qrScanning && !qrDetectionTimer) {
            scanQRCode();
          }
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–æ–≤
        function stopQRDetection() {
          qrScanning = false;
          if (qrDetectionTimer) {
            clearTimeout(qrDetectionTimer);
            qrDetectionTimer = null;
          }
        }
        
        // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Ç–∏–ø–∞
        function getModelCorrection(modelPath) {
          if (modelPath.includes('cat.glb')) {
            return {
              rotation: "0 0 0",
              position: "0 0.05 0",
              scale: "0.5 0.5 0.5"
            };
          } else if (modelPath.includes('model.glb')) {
            return {
              rotation: "0 0 0",
              position: "0 0.05 0",
              scale: "0.3 0.3 0.3"  // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—É–ª–∞ –≤ 10 —Ä–∞–∑ (—Å 3 –¥–æ 0.3)
            };
          }
          
          // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          return {
            rotation: "0 0 0",
            position: "0 0.05 0",
            scale: "0.5 0.5 0.5"
          };
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        qrMarkers.forEach((marker, index) => {
          if (marker) {
            // –ü—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞
            marker.addEventListener('markerFound', function() {
              console.log(`–ú–∞—Ä–∫–µ—Ä QR ${index + 1} –Ω–∞–π–¥–µ–Ω`);
              arHint.textContent = `QR-–∫–æ–¥ ${index + 1} –æ–±–Ω–∞—Ä—É–∂–µ–Ω`;
              arHint.classList.remove('hidden');
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä
              lastMarkerFound = marker;
              
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ QR-–∫–æ–¥–∞
              if (selectedModel && !marker.hasChildNodes()) {
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –º–∞—Ä–∫–µ—Ä–µ
                placeModelAtQR();
              }
              
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
              if (selectedModel) {
                modelControls.style.display = 'flex';
              }
            });
            
            // –ü—Ä–∏ –ø–æ—Ç–µ—Ä–µ –º–∞—Ä–∫–µ—Ä–∞
            marker.addEventListener('markerLost', function() {
              console.log(`–ú–∞—Ä–∫–µ—Ä QR ${index + 1} –ø–æ—Ç–µ—Ä—è–Ω`);
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä
              if (lastMarkerFound === marker) {
                lastMarkerFound = null;
              }
            });
          }
        });

        // –†–∞–∑–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ–∫—É—â–µ–º QR-–º–∞—Ä–∫–µ—Ä–µ
        function placeModelAtQR() {
          if (!lastMarkerFound || !selectedModel) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω QR-–º–∞—Ä–∫–µ—Ä –∏–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å');
            arHint.textContent = '–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥';
            return;
          }
          
          console.log('–†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ QR-–º–∞—Ä–∫–µ—Ä–µ:', selectedModel.dataset.model);
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
          const correction = getModelCorrection(selectedModel.dataset.model);
          
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
          const newModelEntity = document.createElement('a-entity');
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏
          newModelEntity.setAttribute('gltf-model', selectedModel.dataset.model);
          newModelEntity.setAttribute('position', correction.position);
          newModelEntity.setAttribute('rotation', correction.rotation);
          newModelEntity.setAttribute('scale', correction.scale);
          newModelEntity.setAttribute('class', 'placed-model');
          newModelEntity.setAttribute('animation', 'property: rotation; to: 0 360 0; loop: true; dur: 10000; easing: linear');
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –º–æ–¥–µ–ª–∏
          const modelId = 'placed-model-' + Date.now();
          newModelEntity.setAttribute('id', modelId);
          
          console.log('–°–æ–∑–¥–∞–Ω–∞ –º–æ–¥–µ–ª—å —Å ID:', modelId);
          
          // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∞–π—Ç–∞ –∏ email
          const buttonContainer = document.createElement('a-entity');
          buttonContainer.setAttribute('position', '0 0 0');
          
          // –í–µ–±-—Å–∞–π—Ç –∫–Ω–æ–ø–∫–∞
          const websiteButton = document.createElement('a-plane');
          websiteButton.setAttribute('id', 'qr-website-button-' + Date.now());
          websiteButton.setAttribute('position', '0.2 0 0');
          websiteButton.setAttribute('rotation', '0 0 0');
          websiteButton.setAttribute('width', '0.15');
          websiteButton.setAttribute('height', '0.15');
          websiteButton.setAttribute('material', 'src: #site-img; transparent: true;');
          websiteButton.setAttribute('look-at', '[camera]');
          websiteButton.setAttribute('class', 'clickable');
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–∞–π—Ç–∞
          websiteButton.addEventListener('click', function() {
            window.open('https://www.alphawood.store', '_blank');
            console.log('QR —Å–∞–π—Ç –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
          });
          
          // Email –∫–Ω–æ–ø–∫–∞
          const emailButton = document.createElement('a-plane');
          emailButton.setAttribute('id', 'qr-email-button-' + Date.now());
          emailButton.setAttribute('position', '-0.2 0 0');
          emailButton.setAttribute('rotation', '0 0 0');
          emailButton.setAttribute('width', '0.15');
          emailButton.setAttribute('height', '0.15');
          emailButton.setAttribute('material', 'src: #email-img; transparent: true;');
          emailButton.setAttribute('look-at', '[camera]');
          emailButton.setAttribute('class', 'clickable');
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ email
          emailButton.addEventListener('click', function() {
            window.location.href = 'mailto:info@alphawood.store';
            console.log('QR email –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');
          });
          
          // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–æ–¥–µ–ª–∏ —Å –º–∞—Ä–∫–µ—Ä–∞
          while (lastMarkerFound.firstChild) {
            lastMarkerFound.removeChild(lastMarkerFound.firstChild);
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
          buttonContainer.appendChild(websiteButton);
          buttonContainer.appendChild(emailButton);
          
          // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–æ–¥–µ–ª–∏ –∏ –∫–Ω–æ–ø–æ–∫
          const modelContainer = document.createElement('a-entity');
          modelContainer.setAttribute('position', '0 0 0');
          modelContainer.appendChild(newModelEntity);
          modelContainer.appendChild(buttonContainer);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –º–∞—Ä–∫–µ—Ä
          lastMarkerFound.appendChild(modelContainer);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
          placedModels.push({
            id: modelId,
            entity: newModelEntity,
            container: modelContainer,
            marker: lastMarkerFound
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
          arHint.textContent = '–ú–æ–¥–µ–ª—å —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ QR-–∫–æ–¥–µ';
          console.log('–ú–æ–¥–µ–ª—å —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ QR-–º–∞—Ä–∫–µ—Ä–µ');
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          modelControls.style.display = 'flex';
        }
        
        // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—å—é
        function toggleRotationMode() {
          window.rotationMode = !window.rotationMode;
          rotateModelBtn.style.backgroundColor = window.rotationMode ? 'rgba(0, 127, 255, 0.7)' : 'rgba(0, 0, 0, 0.7)';
        }
        
        function scaleModelUp() {
          if (selectedModel && placedModels.length > 0) {
            const lastModel = placedModels[placedModels.length - 1];
            if (lastModel && lastModel.id) {
              const model = document.getElementById(lastModel.id);
              if (model) {
                const currentScale = model.getAttribute('scale');
                const newScale = {
                  x: currentScale.x * 1.2,
                  y: currentScale.y * 1.2,
                  z: currentScale.z * 1.2
                };
                model.setAttribute('scale', newScale);
                console.log('–ú–∞—Å—à—Ç–∞–± —É–≤–µ–ª–∏—á–µ–Ω:', newScale);
              }
            }
          }
        }
        
        function scaleModelDown() {
          if (selectedModel && placedModels.length > 0) {
            const lastModel = placedModels[placedModels.length - 1];
            if (lastModel && lastModel.id) {
              const model = document.getElementById(lastModel.id);
              if (model) {
                const currentScale = model.getAttribute('scale');
                const newScale = {
                  x: currentScale.x * 0.8,
                  y: currentScale.y * 0.8,
                  z: currentScale.z * 0.8
                };
                model.setAttribute('scale', newScale);
                console.log('–ú–∞—Å—à—Ç–∞–± —É–º–µ–Ω—å—à–µ–Ω:', newScale);
              }
            }
          }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–º
        function showLoading(message = '–ó–∞–≥—Ä—É–∑–∫–∞ AR...') {
          // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
          if (loadingTimeout) {
            clearTimeout(loadingTimeout);
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
          loading.textContent = message;
          loading.classList.remove('hidden');
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
          loadingTimeout = setTimeout(() => {
            console.warn('–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏, —Å–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä');
            loading.classList.add('hidden');
          }, LOADING_TIMEOUT);
        }

        function hideLoading() {
          if (loadingTimeout) {
            clearTimeout(loadingTimeout);
            loadingTimeout = null;
          }
          loading.classList.add('hidden');
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏
        function switchModel(modelPath) {
          showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...');
          console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏:', modelPath);
          
          // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
          const correction = getModelCorrection(modelPath);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
          currentModel = {
            path: modelPath,
            correction: correction
          };
          
          // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
          hideLoading();
          console.log('–ú–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞:', modelPath);
          
          return currentModel;
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        function removeLastPlacedModel() {
          if (placedModels.length > 0) {
            // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–∞–∑–º–µ—â–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
            const lastModel = placedModels.pop();
            
            // –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å —Å –º–∞—Ä–∫–µ—Ä–∞
            if (lastModel.marker) {
              while (lastModel.marker.firstChild) {
                lastModel.marker.removeChild(lastModel.marker.firstChild);
              }
              console.log('–£–¥–∞–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å —Å –º–∞—Ä–∫–µ—Ä–∞');
            }
            
            // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π, —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if (placedModels.length === 0) {
              modelControls.style.display = 'none';
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            arHint.textContent = '–ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞';
            console.log('–ú–æ–¥–µ–ª—å —É–¥–∞–ª–µ–Ω–∞');
          }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        try {
          console.log('–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AR –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
          
          // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
          if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia({ video: true, audio: false })
              .then(stream => {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                stream.getTracks().forEach(track => track.stop());
                console.log('Camera permission granted');
                
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–Ω–µ—Ä QR-–∫–æ–¥–æ–≤
                initQRScanner();
              })
              .catch(error => {
                console.error('Error accessing camera:', error);
              });
          }
          
          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
          carouselItems.forEach(item => {
            item.addEventListener('click', () => {
              carouselItems.forEach(i => i.classList.remove('active'));
              item.classList.add('active');
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
              selectedModel = item;
              
              // –ú–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å
              switchModel(item.dataset.model);
              
              // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π QR-–∫–æ–¥, —Ä–∞–∑–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
              if (lastMarkerFound) {
                // –†–∞–∑–º–µ—â–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ QR-–∫–æ–¥–µ
                placeModelAtQR();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                modelControls.style.display = 'flex';
              } else {
              // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                arHint.textContent = '–ù–∞–≤–µ–¥–∏—Ç–µ –∫–∞–º–µ—Ä—É –Ω–∞ QR-–∫–æ–¥ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–æ–¥–µ–ª–∏';
              arHint.classList.remove('hidden');
              }
            });
          });
          
          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏
          rotateModelBtn.addEventListener('click', toggleRotationMode);
          scaleUpBtn.addEventListener('click', scaleModelUp);
          scaleDownBtn.addEventListener('click', scaleModelDown);
          removeModelBtn.addEventListener('click', function() {
            removeLastPlacedModel();
            // –ê–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
            this.style.backgroundColor = 'rgba(255, 0, 0, 0.7)';
            setTimeout(() => {
              this.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
            }, 500);
          });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–±–∏–ª—å–Ω—ã–º
          const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
          if (!isMobile) {
            loading.textContent = 'AR –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö';
            arHint.textContent = 'AR –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö';
          } else {
            loading.classList.add('hidden');
          }
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          if (carouselItems.length > 0) {
            const firstItem = carouselItems[0];
            selectedModel = firstItem;
            switchModel(firstItem.dataset.model);
          }
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          window.addEventListener('online', () => {
            console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
            const activeItem = document.querySelector('.carousel-item.active');
            if (activeItem) {
              switchModel(activeItem.dataset.model);
            }
          });
          
          window.addEventListener('offline', () => {
            console.warn('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
            arHint.textContent = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
          });
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–≤–∞–π–ø–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
          let startX = 0;
          document.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
          });
          
          document.addEventListener('touchend', (e) => {
            const endX = e.changedTouches[0].clientX;
            const diff = startX - endX;
            
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π —Å–≤–∞–π–ø
            if (Math.abs(diff) > 50) {
              const currentActive = document.querySelector('.carousel-item.active');
              let nextItem;
              
              if (diff > 0) {
                // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∞—è –º–æ–¥–µ–ª—å
                nextItem = currentActive.nextElementSibling;
                if (!nextItem || !nextItem.classList.contains('carousel-item')) {
                  nextItem = document.querySelector('.carousel-item:first-child');
                }
              } else {
                // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è –º–æ–¥–µ–ª—å
                nextItem = currentActive.previousElementSibling;
                if (!nextItem || !nextItem.classList.contains('carousel-item')) {
                  nextItem = document.querySelector('.carousel-item:last-child');
                }
              }
              
              // –ú–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
              carouselItems.forEach(i => i.classList.remove('active'));
              nextItem.classList.add('active');
              selectedModel = nextItem;
              switchModel(nextItem.dataset.model);
            }
          });
          
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
          arHint.textContent = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message;
          hideLoading();
        }
      });
    </script>
  </body>
</html>
